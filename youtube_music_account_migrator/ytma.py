from ytmusicapi import YTMusic, setup_oauth

old_gsuite_account_oauth_file = "oauth-old-gsuite-account.json"
new_gmail_account_oauth_file = "oauth-new-gmail-account.json"


class YTMusicMigrator:

    def __init__(
        self,
        old_account_oauth_file: str,
        new_account_oauth_file: str
    ) -> None:
        self.batch_limit = 99999
        self.old_account_oauth_file = old_account_oauth_file
        self.new_account_oauth_file = new_account_oauth_file
        self.source_ytmusic = YTMusic(old_gsuite_account_oauth_file)
        self.dest_ytmusic = YTMusic(new_gmail_account_oauth_file)

    def rate_playlist_in_destination_account(self, playlistId, title, artist, dry_run: bool):
        if not dry_run:
            self.dest_ytmusic.rate_playlist(
                playlistId=playlistId,
                rating='LIKE'
            )
        dry_run_indicator = "Mode: dry-run: " if dry_run else ""
        print(f"{dry_run_indicator}Rating set for album/playlist: {title} by: {artist}")

    def get_playlists_in_destination_account_by_name(self, playlistName):
        playlists_with_name = self.dest_ytmusic.get_library_playlists(limit=self.batch_limit)
        return list(filter(lambda playlist: (playlist['title'] == playlistName), playlists_with_name))

    def rate_song_in_destination_account(self, song, dry_run: bool):
        if not dry_run:
            self.dest_ytmusic.rate_song(
                videoId=song['videoId'],
                rating=song["likeStatus"]
            )
        dry_run_indicator = "Mode: dry-run: " if dry_run else ""
        print(f"{dry_run_indicator}Rating set for: {song['title']} by: {song['artists'][0]['name']}")

    def migrate_liked_songs(self, dry_run: bool):
        print("Migrating liked songs...")
        liked_songs = self.source_ytmusic.get_liked_songs(limit=self.batch_limit)
        for liked_song in liked_songs["tracks"]:
            self.rate_song_in_destination_account(liked_song, dry_run)

    def migrate_library_albums(self, dry_run: bool):
        print("Migrating library albums...")
        library_albums = self.source_ytmusic.get_library_albums(limit=self.batch_limit)
        for library_album in library_albums:
            self.rate_playlist_in_destination_account(
                dry_run=dry_run,
                playlistId=library_album['playlistId'],
                title=library_album['title'],
                artist=library_album['artists'][0]['name']
            )

    def migrate_library_songs(self, dry_run: bool):
        print("Migrating library songs...")
        library_songs = self.source_ytmusic.get_library_songs(limit=self.batch_limit)
        for library_song in library_songs:
            self.rate_song_in_destination_account(library_song, dry_run)

    def migrate_library_playlists(self, dry_run: bool):
        print("Migrating library playlists...")
        library_playlists = self.source_ytmusic.get_library_playlists(limit=self.batch_limit)
        for library_playlist in library_playlists:
            source_playlist = self.source_ytmusic.get_playlist(library_playlist['playlistId'])
            playlist_title = source_playlist['title']

            autogenerated_playlist_titles = ["Your Likes"]
            if playlist_title in autogenerated_playlist_titles:
                continue

            dry_run_indicator = "Mode: dry-run: " if dry_run else ""
            if not dry_run:
                already_existing_dest_playlists = self.get_playlists_in_destination_account_by_name(playlist_title)
                for dest_playlist in already_existing_dest_playlists:
                    self.dest_ytmusic.delete_playlist(playlistId=dest_playlist['playlistId'])

                self.dest_ytmusic.create_playlist(
                    title=playlist_title,
                    description=source_playlist['description'] if source_playlist['description'] is not None else "",
                    # NOTE: For some reason playlist creation fails if privacy_status is set to 'PUBLIC'
                    privacy_status='PRIVATE' if source_playlist['privacy'] == 'PUBLIC' else source_playlist['privacy'],
                    video_ids=[sp['videoId'] for sp in source_playlist['tracks']]
                )
            print(f"{dry_run_indicator}Migrated user playlist: {playlist_title}")
            if source_playlist['privacy'] == 'PUBLIC':
                print(f"\tNote: Original '{playlist_title}' playlist visibility was {source_playlist['privacy']} but new playlist visibility has been set to private. Please change manually if you want share the playlist with others.")

    def migrate_uploaded_songs(self, dry_run: bool):
        pass

    def migrate(self, dry_run: bool):
        self.migrate_liked_songs(dry_run=dry_run)
        print("")
        self.migrate_library_songs(dry_run=dry_run)
        print("")
        self.migrate_library_albums(dry_run=dry_run)
        print("")
        self.migrate_library_playlists(dry_run=dry_run)
        print("")
        self.migrate_uploaded_songs(dry_run=dry_run)


def do_dry_run_migration():
    migrator = YTMusicMigrator(
        old_gsuite_account_oauth_file,
        new_gmail_account_oauth_file
    )
    migrator.migrate(dry_run=True)


def migrate():
    migrator = YTMusicMigrator(
        old_gsuite_account_oauth_file,
        new_gmail_account_oauth_file
    )
    migrator.migrate(dry_run=False)


def oauth_old_account():
    setup_oauth(old_gsuite_account_oauth_file, open_browser=True)


def oauth_new_account():
    setup_oauth(new_gmail_account_oauth_file, open_browser=True)
